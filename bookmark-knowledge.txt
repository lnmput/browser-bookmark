================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2024-08-16T23:59:19.091611

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
.github/
  workflows/
    submit.yml
@/
  components/
    ui/
      button.tsx
      card.tsx
  lib/
    utils.ts
assets/
  icon.png
src/
  components/
    ui/
      button.tsx
      input.tsx
    BookmarkItem.tsx
    BookmarkTree.tsx
    DarkModeToggle.tsx
    FolderIcon.tsx
    IconBookmarks.tsx
    SearchBar.tsx
    UnnamedBookmarks.tsx
  contents/
    plasmo.ts
  hooks/
    useBookmarks.ts
  lib/
    utils.ts
  services/
    bookmarkService.ts
  styles/
    globals.css
  background.ts
  options.tsx
  sidepanel.tsx
.prettierrc.mjs
README.md
components.json
package.json
postcss.config.js
repopack.json
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: README.md
================
This is a [Plasmo extension](https://docs.plasmo.com/) project bootstrapped with [`plasmo init`](https://www.npmjs.com/package/plasmo).

## Getting Started

First, run the development server:

```bash
pnpm dev
# or
npm run dev
```

Open your browser and load the appropriate development build. For example, if you are developing for the chrome browser, using manifest v3, use: `build/chrome-mv3-dev`.

You can start editing the popup by modifying `popup.tsx`. It should auto-update as you make changes. To add an options page, simply add a `options.tsx` file to the root of the project, with a react component default exported. Likewise to add a content page, add a `content.ts` file to the root of the project, importing some module and do some logic, then reload the extension on your browser.

For further guidance, [visit our Documentation](https://docs.plasmo.com/)

## Making production build

Run the following:

```bash
pnpm build
# or
npm run build
```

This should create a production bundle for your extension, ready to be zipped and published to the stores.

## Submit to the webstores

The easiest way to deploy your Plasmo extension is to use the built-in [bpp](https://bpp.browser.market) GitHub action. Prior to using this action however, make sure to build your extension and upload the first version to the store to establish the basic credentials. Then, simply follow [this setup instruction](https://docs.plasmo.com/framework/workflows/submit) and you should be on your way for automated submission!

## 其他
```markdown
repopack /Users/yangzie/www/browser/bookmark -c /Users/yangzie/www/browser/bookmark/repopack.json -o bookmark-knowledge.txt
```

### prompt
```markdown

```

================
File: repopack.json
================
{
    "output": {
      "filePath": "bookmark-knowledge.txt",
      "style": "txt",
      "headerText": "a bookmark browser extension.",
      "removeComments": false,
      "removeEmptyLines": false,
      "showLineNumbers": false,
      "topFilesLength": 5
    },
    "include": ["**/*"],
    "ignore": {
      "useGitignore": true,
      "useDefaultPatterns": true,
      "customPatterns": [
        "additional-folder",
        "**/*.log",
        "build",
        "node_modules",
        "@",
        ".plasmo",
        ".github"
      ]
    }
  }

================
File: package.json
================
{
  "name": "bookmark for browser",
  "displayName": "Bookmark",
  "version": "0.0.2",
  "description": "A basic Plasmo extension for browser.",
  "author": "Plasmo Corp. <foss@plasmo.com>",
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "package": "plasmo package"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.427.0",
    "plasmo": "0.88.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "4.1.1",
    "@types/chrome": "0.0.258",
    "@types/node": "20.11.5",
    "@types/react": "18.2.48",
    "@types/react-dom": "18.2.18",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.41",
    "prettier": "3.2.4",
    "tailwindcss": "^3.4.10",
    "typescript": "5.3.3"
  },
  "manifest": {
    "host_permissions": [
      "https://*/*"
    ],
    "permissions": [
      "bookmarks"
    ]
  }
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: tsconfig.json
================
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": [
    "node_modules"
  ],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx"
  ],
  "compilerOptions": {
    "paths": {
      "~*": [
        "./src/*"
      ]
    },
    "baseUrl": "."
  }
}

================
File: .prettierrc.mjs
================
/**
 * @type {import('prettier').Options}
 */
export default {
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: false,
  trailingComma: "none",
  bracketSpacing: true,
  bracketSameLine: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
  importOrder: [
    "<BUILTIN_MODULES>", // Node.js built-in modules
    "<THIRD_PARTY_MODULES>", // Imports not matched by other special words or groups.
    "", // Empty line
    "^@plasmo/(.*)$",
    "",
    "^@plasmohq/(.*)$",
    "",
    "^~(.*)$",
    "",
    "^[./]"
  ]
}

================
File: postcss.config.js
================
/**
 * @type {import('postcss').ProcessOptions}
 */
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {}
    }
}

================
File: .github/workflows/submit.yml
================
name: "Submit to Web Store"
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: latest
          run_install: true
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16.x
          cache: "pnpm"
      - name: Build the extension
        run: pnpm build
      - name: Package the extension into a zip artifact
        run: pnpm package
      - name: Browser Platform Publish
        uses: PlasmoHQ/bpp@v3
        with:
          keys: ${{ secrets.SUBMIT_KEYS }}
          artifact: build/chrome-mv3-prod.zip

================
File: @/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: @/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: @/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/sidepanel.tsx
================
import React, { useState, useEffect } from 'react'
import "./styles/globals.css"
import { BookmarkTree } from './components/BookmarkTree'
import { DarkModeToggle } from './components/DarkModeToggle'
import { useBookmarks } from './hooks/useBookmarks'
import { updateBookmark, deleteBookmark } from './services/bookmarkService'

const Sidepanel: React.FC = () => {
  const { bookmarks, loading, error } = useBookmarks()
  const [isDarkMode, setIsDarkMode] = useState(false)

  useEffect(() => {
    const root = window.document.documentElement
    if (isDarkMode) {
      root.classList.add('dark')
    } else {
      root.classList.remove('dark')
    }
  }, [isDarkMode])

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
  }

  const handleEdit = async (bookmark) => {
    const newTitle = prompt('Enter new title', bookmark.title);
    if (newTitle) {
      try {
        await updateBookmark(bookmark.id, { title: newTitle });
        // In a real app, you'd want to update the state here
        alert('Bookmark updated successfully');
      } catch (error) {
        console.error('Failed to update bookmark', error);
        alert('Failed to update bookmark');
      }
    }
  };

  const handleDelete = async (id) => {
    if (confirm('Are you sure you want to delete this bookmark?')) {
      try {
        await deleteBookmark(id);
        // In a real app, you'd want to update the state here
        alert('Bookmark deleted successfully');
      } catch (error) {
        console.error('Failed to delete bookmark', error);
        alert('Failed to delete bookmark');
      }
    }
  };
  if (loading) return <div className="p-4 text-foreground">Loading...</div>
  if (error) return (
    <div className="p-4 text-red-500">
      Error: {error.message}
      <br />
      Please make sure you've granted the necessary permissions and are running this in a valid extension context.
    </div>
  )

  return (
    <div className={`min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 p-4`}>
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold text-foreground">Bookmarks</h1>
        <DarkModeToggle isDarkMode={isDarkMode} toggleDarkMode={toggleDarkMode} />
      </div>
      <BookmarkTree bookmarks={bookmarks} onEdit={handleEdit} onDelete={handleDelete} />
    </div>
  )
}

export default Sidepanel

================
File: src/background.ts
================
console.log("HELLO WORLD FROM BGSCRIPTS")

chrome.action.onClicked.addListener( ( tab ) => {
    chrome.sidePanel.setOptions( {
        tabId: tab.id,
        path: "sidepanel.html",
        enabled: true
    } );
    chrome.sidePanel.open( { tabId: tab.id } );

});

================
File: src/options.tsx
================
import { useState } from "react"

function IndexOptions() {
  const [data, setData] = useState("")

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        padding: 16
      }}>
      <h1>
        Welcome to your <a href="https://www.plasmo.com">Plasmo</a> Extension!
      </h1>
      <input onChange={(e) => setData(e.target.value)} value={data} />
      <footer>Crafted by @PlasmoHQ</footer>{" "}
    </div>
  )
}

export default IndexOptions

================
File: src/contents/plasmo.ts
================
import type { PlasmoCSConfig } from "plasmo"

export const config: PlasmoCSConfig = {
  matches: ["https://www.plasmo.com/*"]
}

window.addEventListener("load", () => {
  console.log("content script loaded")

  document.body.style.background = "pink"
})

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

================
File: src/components/FolderIcon.tsx
================
import React from 'react';

export const FolderIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M22 19C22 19.5304 21.7893 20.0391 21.4142 20.4142C21.0391 20.7893 20.5304 21 20 21H4C3.46957 21 2.96086 20.7893 2.58579 20.4142C2.21071 20.0391 2 19.5304 2 19V5C2 4.46957 2.21071 3.96086 2.58579 3.58579C2.96086 3.21071 3.46957 3 4 3H9L11 6H20C20.5304 6 21.0391 6.21071 21.4142 6.58579C21.7893 6.96086 22 7.46957 22 8V19Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

================
File: src/components/UnnamedBookmarks.tsx
================
// src/components/UnnamedBookmarks.tsx

import React from 'react'
import { Bookmark } from '../services/bookmarkService'

interface UnnamedBookmarksProps {
  bookmarks: Bookmark[]
}

export const UnnamedBookmarks: React.FC<UnnamedBookmarksProps> = ({ bookmarks }) => {
  return (
    <div className="grid grid-cols-6 gap-4 mb-6">
      {bookmarks.map((bookmark) => (
        <div
          key={bookmark.id}
          className="flex flex-col items-center justify-center p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors duration-200 cursor-pointer"
          onClick={() => chrome.tabs.create({ url: bookmark.url })}
        >
          <img
            src={`https://s2.googleusercontent.com/s2/favicons?domain_url=${bookmark.url}`}
            alt=""
            className="w-8 h-8 mb-2"
          />
          <span className="text-xs text-center truncate w-full">{new URL(bookmark.url).hostname}</span>
        </div>
      ))}
    </div>
  )
}

================
File: src/components/SearchBar.tsx
================
// src/components/SearchBar.tsx

import React, { useState, useCallback } from 'react'
import { Input } from "src/components/ui/input"
import { Search } from 'lucide-react'

interface SearchBarProps {
  onSearch: (query: string) => void
}

export const SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {
  const [query, setQuery] = useState('')

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const newQuery = e.target.value
    setQuery(newQuery)
    onSearch(newQuery)
  }, [onSearch])

  return (
    <div className="relative mb-4">
      <Input
        type="text"
        placeholder="Search bookmarks..."
        value={query}
        onChange={handleChange}
        className="pl-10"
      />
      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
    </div>
  )
}

================
File: src/components/BookmarkItem.tsx
================
// src/components/BookmarkItem.tsx

import React, { useState, useEffect } from 'react'
import { Bookmark } from '../services/bookmarkService'
import { Button } from "@/components/ui/button"
import { Edit, Trash2 } from 'lucide-react'
import { FolderIcon } from './FolderIcon'

interface BookmarkItemProps {
  bookmark: Bookmark
  onEdit: (bookmark: Bookmark) => void
  onDelete: (id: string) => void
  level: number
}

export const BookmarkItem: React.FC<BookmarkItemProps> = ({
  bookmark,
  onEdit,
  onDelete,
  level
}) => {
  const [isExpanded, setIsExpanded] = useState(false)
  const [isHovered, setIsHovered] = useState(false)
  const [favicon, setFavicon] = useState('')

  useEffect(() => {
    if (bookmark.url) {
      const img = new Image()
      img.onload = () => setFavicon(`https://s2.googleusercontent.com/s2/favicons?domain_url=${bookmark.url}`)
      img.onerror = () => setFavicon('default-icon.png') // 使用一个默认图标
      img.src = `https://s2.googleusercontent.com/s2/favicons?domain_url=${bookmark.url}`
    }
  }, [bookmark.url])

  const toggleExpand = (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (bookmark.children && bookmark.children.length > 0) {
      setIsExpanded(!isExpanded)
    }
  }

  const handleClick = () => {
    if (bookmark.url) {
      chrome.tabs.create({ url: bookmark.url })
    } else {
      toggleExpand({ preventDefault: () => {}, stopPropagation: () => {} } as React.MouseEvent)
    }
  }

  const isSystemFolder = level === 0 && !bookmark.url
  const bookmarkCount = bookmark.children ? bookmark.children.length : 0

  if (bookmark.url && (!bookmark.title || bookmark.title.trim() === '')) {
    return null
  }

  return (
    <div>
      <div 
        className={`flex items-center p-2 rounded-lg transition-all duration-300 ease-in-out cursor-pointer
                    ${isHovered ? 'bg-white/10' : 'hover:bg-white/5'}`}
        style={{ paddingLeft: `${level * 16 + 8}px` }}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        onClick={handleClick}
      >
        {bookmark.children && bookmark.children.length > 0 ? (
          <FolderIcon className={`w-4 h-4 mr-2 ${isExpanded ? 'text-yellow-400' : 'text-gray-400'}`} />
        ) : (
          <img 
            src={favicon || 'default-icon.png'}
            alt="" 
            className="w-4 h-4 mr-2"
          />
        )}
        <span className="truncate flex-grow">{bookmark.title}</span>
        {bookmark.children && (
          <span className="text-sm text-gray-400 mr-2">{bookmarkCount}</span>
        )}
        {!isSystemFolder && (
          <div 
            className={`flex transition-opacity duration-300 ease-in-out 
                        ${isHovered ? 'opacity-100' : 'opacity-0'}`}
          >
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.stopPropagation()
                onEdit(bookmark)
              }}
              className="mr-1"
            >
              <Edit size={16} />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              onClick={(e) => {
                e.stopPropagation()
                onDelete(bookmark.id)
              }}
            >
              <Trash2 size={16} />
            </Button>
          </div>
        )}
      </div>
      {isExpanded && bookmark.children && (
        <div className="ml-4 transition-all duration-300 ease-in-out">
          {bookmark.children.map((child) => (
            <BookmarkItem
              key={child.id}
              bookmark={child}
              onEdit={onEdit}
              onDelete={onDelete}
              level={level + 1}
            />
          ))}
        </div>
      )}
    </div>
  )
}

================
File: src/components/DarkModeToggle.tsx
================
// src/components/DarkModeToggle.tsx

import React from 'react'
import { Button } from "@/components/ui/button"
import { Moon, Sun } from 'lucide-react'

interface DarkModeToggleProps {
  isDarkMode: boolean
  toggleDarkMode: () => void
}

export const DarkModeToggle: React.FC<DarkModeToggleProps> = ({ isDarkMode, toggleDarkMode }) => {
  return (
    <Button variant="ghost" size="icon" onClick={toggleDarkMode}>
      {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}
    </Button>
  )
}

================
File: src/components/IconBookmarks.tsx
================
// src/components/IconBookmarks.tsx

import React from 'react'
import { Bookmark } from '../services/bookmarkService'

interface IconBookmarksProps {
  bookmarks: Bookmark[]
}

export const IconBookmarks: React.FC<IconBookmarksProps> = ({ bookmarks }) => {
  return (
    <div className="grid grid-cols-6 gap-4 mb-6">
      {bookmarks.map((bookmark) => (
        <div 
          key={bookmark.id} 
          className="flex flex-col items-center justify-center p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors duration-200 cursor-pointer"
          onClick={() => chrome.tabs.create({ url: bookmark.url })}
        >
          <img 
            src={`https://s2.googleusercontent.com/s2/favicons?domain_url=${bookmark.url}&sz=64`}
            alt=""
            className="w-12 h-12 mb-2"
          />
          <span className="text-xs text-center truncate w-full">{bookmark.title || new URL(bookmark.url).hostname}</span>
        </div>
      ))}
    </div>
  )
}

================
File: src/components/BookmarkTree.tsx
================
// src/components/BookmarkTree.tsx

import React, { useState, useMemo } from 'react'
import { Bookmark } from '../services/bookmarkService'
import { BookmarkItem } from './BookmarkItem'
import { UnnamedBookmarks } from './UnnamedBookmarks'
import { SearchBar } from './SearchBar'
import { Card, CardContent } from "@/components/ui/card"

interface BookmarkTreeProps {
  bookmarks: Bookmark[]
  onEdit: (bookmark: Bookmark) => void
  onDelete: (id: string) => void
}

export const BookmarkTree: React.FC<BookmarkTreeProps> = ({
  bookmarks,
  onEdit,
  onDelete
}) => {
  const [searchQuery, setSearchQuery] = useState('')
  const specialFolder = bookmarks[0]

  const flattenBookmarks = (items: Bookmark[]): Bookmark[] => {
    return items.reduce((acc: Bookmark[], item) => {
      if (item.url) {
        acc.push(item)
      }
      if (item.children) {
        acc.push(...flattenBookmarks(item.children))
      }
      return acc
    }, [])
  }

  const allBookmarks = useMemo(() => flattenBookmarks(specialFolder.children || []), [specialFolder])

  const filteredBookmarks = useMemo(() => {
    if (!searchQuery) return []
    return allBookmarks.filter(bookmark => 
      (bookmark.title && bookmark.title.toLowerCase().includes(searchQuery.toLowerCase())) ||
      (bookmark.url && bookmark.url.toLowerCase().includes(searchQuery.toLowerCase()))
    )
  }, [allBookmarks, searchQuery])

  const unnamedBookmarks = useMemo(() => {
    return allBookmarks.filter(bookmark => !bookmark.title || bookmark.title.trim() === '')
  }, [allBookmarks])

  const [firstFolder, ...otherFolders] = specialFolder.children || []

  const allFolders = [
    ...(firstFolder?.children?.filter(item => item.children) || []),
    ...otherFolders
  ]

  const directBookmarks = firstFolder?.children?.filter(item => item.url) || []

  return (
    <Card className="bg-gradient-to-br from-white/10 to-white/5 dark:from-gray-800 dark:to-gray-900 backdrop-blur-lg border-none shadow-lg">
      <CardContent className="p-4">
        <SearchBar onSearch={setSearchQuery} />
        {!searchQuery && <UnnamedBookmarks bookmarks={unnamedBookmarks} />}
        
        {searchQuery ? (
          filteredBookmarks.map((bookmark) => (
            <BookmarkItem
              key={bookmark.id}
              bookmark={bookmark}
              onEdit={onEdit}
              onDelete={onDelete}
              level={0}
            />
          ))
        ) : (
          <>
            {allFolders.map((folder) => (
              <BookmarkItem
                key={folder.id}
                bookmark={folder}
                onEdit={onEdit}
                onDelete={onDelete}
                level={0}
              />
            ))}
            {directBookmarks.map((bookmark) => (
              <BookmarkItem
                key={bookmark.id}
                bookmark={bookmark}
                onEdit={onEdit}
                onDelete={onDelete}
                level={0}
              />
            ))}
          </>
        )}
      </CardContent>
    </Card>
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/hooks/useBookmarks.ts
================
// src/hooks/useBookmarks.ts

import { useState, useEffect } from 'react';
import { Bookmark, getBookmarks } from '../services/bookmarkService';

export const useBookmarks = () => {
  const [bookmarks, setBookmarks] = useState<Bookmark[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const fetchBookmarks = async () => {
      try {
        const result = await getBookmarks();
        setBookmarks(result);
        setLoading(false);
      } catch (err) {
        setError(err as Error);
        setLoading(false);
      }
    };

    fetchBookmarks();
  }, []);

  return { bookmarks, loading, error };
};

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/services/bookmarkService.ts
================
export interface Bookmark {
    id: string;
    title: string;
    url?: string;
    children?: Bookmark[];
  }
  
  export const getBookmarks = (): Promise<Bookmark[]> => {
    return new Promise((resolve, reject) => {
      chrome.bookmarks.getTree((results) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(results);
        }
      });
    });
  };
  
  export const createBookmark = (
    parentId: string,
    title: string,
    url?: string
  ): Promise<Bookmark> => {
    return new Promise((resolve, reject) => {
      chrome.bookmarks.create({ parentId, title, url }, (result) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(result);
        }
      });
    });
  };
  
  export const updateBookmark = (
    id: string,
    changes: { title?: string; url?: string }
  ): Promise<Bookmark> => {
    return new Promise((resolve, reject) => {
      chrome.bookmarks.update(id, changes, (result) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(result);
        }
      });
    });
  };
  
  export const deleteBookmark = (id: string): Promise<void> => {
    return new Promise((resolve, reject) => {
      chrome.bookmarks.remove(id, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
  };
